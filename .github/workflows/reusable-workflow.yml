name: Deploy to Environment

on:
  workflow_call:
    inputs:
      env:
        description: "The name of environment (eg. STAGING, PRODUCTION, SAUCE-LABS)"
        required: true
        type: string
      artifact-name:
        description: "The name of the artifact to download"
        required: true
        type: string

jobs:
  test:
    strategy:
      matrix:
        browser: [firefox]
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          sudo apt-get install -y firefox

      # Installation of 'uv' is required
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      # This is temporary for debugging
      - name: Verify repository contents
        run: ls -la

      - name: Set up virtual environment and install dependencies
        run: |
          uv venv -p 3.11 
          python -m pip install --upgrade pip 
          source .venv/bin/activate
          uv pip install -r requirements.txt
          ls -la

      - name: Install Firefox
        uses: browser-actions/setup-firefox@v1

      # This is temporary for debugging
      - name: Verify browser installation
        run: |
          firefox --version

      # Create a directory for logs
      - name: Create Logs Directory
        run: mkdir -p latest_logs/errors

      - name: Run Tests Based on Environment
        env:
          ENV_URL: ${{ vars.ENV_URL }}
          ENV_NAME: ${{ inputs.env }}
          OBI_USERNAME: ${{ secrets.OBI_USERNAME }}
          OBI_PASSWORD: ${{ secrets.OBI_PASSWORD }}
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
        run: |
          echo "Running tests for ${{ matrix.browser }} in $ENV_URL with Username $OBI_USERNAME"
          echo "ENV_URL: $ENV_URL"  
          echo "ENV_NAME: $ENV_NAME"
          uv run pytest tests/test_login.py --env=$ENV_NAME --env_url=$ENV_URL \
          -sv --headless --html=latest_logs/report_$ENV_NAME_${{ matrix.browser }}.html \
            --self-contained-html --browser-name=${{ matrix.browser }}

      # Upload test artifacts (screenshots) if failure
      - name: Upload test artifacts (screenshots)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-screenshots
          path: latest_logs/errors
          if-no-files-found: warn

      # Notify slack on success
      - name: Notify slack on success
        if: success()
        env:
          SLACK_WEBHOOK_URL_PASS: ${{ secrets.SLACK_WEBHOOK_URL_PASS }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\":white_check_mark: Test pipeline succeeded in *${{ github.repository }}*. Branch: *${{ github.ref_name }}*\", \"username\":\"GitHub Actions\", \"icon_emoji\":\":rocket:\"}" \
          $SLACK_WEBHOOK_URL_PASS

      # Notify slack on failure
      - name: Notify slack on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_FAIL }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\":x: Test pipeline failed in *${{ github.repository }}*. Branch: *${{ github.ref_name }}*. Check the logs for details.\", \"username\":\"GitHub Actions\", \"icon_emoji\":\":warning:\"}" \
          $SLACK_WEBHOOK_URL