name: Run all tests


on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature2
  pull_request:
    branches:
      - main
      - test-branch
  schedule:
      - cron: "0 7 * * 2"  # Every Tuesday at 7:00 AM UTC (8:00 AM Zurich time during CET)
      - cron: "0 7 * * 5"  # Every Friday at 7:00 AM UTC (8:00 AM Zurich time during CET)


jobs:
  test-environments:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [staging, production, sauce-labs]
        browser: [chrome, firefox]

    environment: ${{matrix.environment}}

    services:
      selenium:
        image: selenium/standalone-firefox:latest
        ports:
          - 4444:4444
        options: >-
          --shm-size 2g

    concurrency: one-deploy-at-a-time

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Set up Chrome and ChromeDriver
    - name: Set up Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 120
        install-chromedriver: true
        install-dependencies: true

    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html

    # Step 5: Run pytest tests
    - name: Set BASE_URL based on environment variables and BROWSER_NAME
      env:
        STAGING_URL: ${{ vars.STAGING_URL }}
        PRODUCTION_URL: ${{ vars.PRODUCTION_URL }}
        SAUCE_LABS_URL: ${{ vars.SAUCE_LABS_URL }}
        BROWSER_NAME: firefox
      run: |
        for BROWSER_NAME in chrome firefox; do
          case "${{ matrix.environment }}" in
            staging) BASE_URL=${{ env.STAGING_URL }} ;;
            production) BASE_URL=${{ env.PRODUCTION_URL }} ;;
            sauce-labs) BASE_URL=${{ env.SAUCE_LABS_URL }} ;;
        esac

        echo "Running tests on $BROWSER_NAME in environment ${{ matrix.environment }}"
        pytest tests/ -sv --headless --html=latest_logs/report_${{ matrix.environment }}_${BROWSER_NAME}.html \
          --self-contained-html --browser-name=$BROWSER_NAME
        done

    # Step 6: Set Selenium Remote URL for all environments
    - name: Set SELENIUM_REMOTE_URL
      run: |
        case "${{ matrix.environment }}" in
          sauce-labs) echo "SELENIUM_REMOTE_URL=https://ondemand.eu-central-1.saucelabs.com:443/wd/hub" >> $GITHUB_ENV ;;
          *) echo "SELENIUM_REMOTE_URL=http://localhost:4444/wd/hub" >> $GITHUB_ENV ;;
        esac

      # Step 7: Run tests selectively
    - name: Run tests for ${{ matrix.environment }}
      env:
        BASE_URL: ${{ env.BASE_URL }}
        SELENIUM_REMOTE_URL: ${{ env.SELENIUM_REMOTE_URL }}
        SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
        SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
      run: |
        if [ "${{ matrix.environment }}" = "staging" ]; then
          pytest tests/test_login.py -sv \
            --headless \
            --html=latest_logs/report_staging.html \
            --self-contained-html \
            --env=staging \
            --env_url=${{ env.BASE_URL }} \
            --browser-name=${{ env.BROWSER_NAME }}
        elif [ "${{ matrix.environment }}" = "production" ]; then
          pytest tests/test_login.py -sv \
            --headless \
            --html=latest_logs/report_production.html \
            --self-contained-html \
            --env=production \
            --env_url=${{ env.BASE_URL }} \
            --browser-name=${{ env.BROWSER_NAME }}
        elif [ "${{ matrix.environment }}" = "sauce-labs" ]; then
          pytest tests/test_login.py -sv \
            --headless \
            --html=latest_logs/report_sauce_labs.html \
            --self-contained-html \
            --env=sauce-labs \
            --env_url=${{ env.BASE_URL }} \
            --sauce-labs
        fi
    

    # Step 8: Upload screenshots as artifacts
    - name: Upload error screenshots
      if: failure() # Only upload if the job fails
      uses: actions/upload-artifact@v3
      with:
        name: error-screenshots
        path: latest_logs/errors/

    # Step 9: Upload HTML test report
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: latest_logs/report.html

#    # Step 7: Slack notification on success
#    - name: Notify Slack on Success
#      if: success()
#      env:
#        SLACK_WEBHOOK_URL_PASS: ${{ secrets.SLACK_WEBHOOK_URL_PASS }}
#      run: |
#        curl -X POST -H 'Content-type: application/json' \
#          --data "{\"text\":\":white_check_mark: Test pipeline succeeded in *${{ github.repository }}*. Branch: *${{ github.ref_name }}*\", \"username\":\"GitHub Actions\", \"icon_emoji\":\":rocket:\"}" \
#          $SLACK_WEBHOOK_URL_PASS
#
##     Step 8: Slack notification on failure
#    - name: Notify Slack on Failure
#      if: failure()
#      env:
#        SLACK_WEBHOOK_URL_FAIL: ${{ secrets.SLACK_WEBHOOK_URL_FAIL }}
#      run: |
#        curl -X POST -H 'Content-type: application/json' \
#          --data "{\"text\":\":x: Test pipeline failed in *${{ github.repository }}*. Branch: *${{ github.ref_name }}*. Check the logs for details.\", \"username\":\"GitHub Actions\", \"icon_emoji\":\":warning:\"}" \
#          $SLACK_WEBHOOK_URL_FAIL